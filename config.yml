title: VTEX IO Service Course
tagline: Building backend applications with VTEX IO
description: >-
  In this course, learn about the main possibilities of backend applications in
  VTEX IO. Export routes, handle events and connect with external and internal
  apps, to make your VTEX IO app even better and take the best out of VTEX
  infrastructure.
template:
  name: service-course
  repo: service-course-template
before:
  - body: 00-services.md
    title: Services in VTEX IO
    type: createIssue
steps:
  - title: Services in VTEX IO
    description: >-
      On this step, we have an overview of services in VTEX IO and brief
      explanation of backend possibilities
    event: issues.closed
    link: '{{ repoUrl }}/issues/1'
    actions:
      - type: respond
        with: new-issue.md
        issue: 1
        data:
          nextIssue: '2'
      - body: 01-boilerplate.md
        title: 'Overview: Understanding the Boilerplate'
        type: createIssue
  - title: 'Overview: Understanding the Boilerplate'
    description: 'Here we have a walkthrough the boilerplate, explaining each file''s purpose'
    event: issues.closed
    link: '{{ repoUrl }}/issues/2'
    actions:
      - type: respond
        with: new-issue.md
        issue: 2
        data:
          nextIssue: '3'
      - body: 02-events.md
        title: 'Events: Handling and receiving events'
        type: createIssue
  - title: 'Events: Handling and receiving events'
    description: >-
      On this step we approach using events in VTEX IO and learn how to
      configure an app to listen to events
    event: issues.closed
    link: '{{ repoUrl }}/issues/3'
    actions:
      - type: respond
        with: new-issue.md
        issue: 3
        data:
          nextIssue: '4'
      - body: 03-clients-analytics.md
        title: Getting to know more about clients
        type: createIssue
  - title: Getting to know more about clients
    description: >-
      Here we have an introduction of clients in VTEX IO and implementation of a
      external app client
    event: issues.closed
    link: '{{ repoUrl }}/issues/4'
    actions:
      - type: respond
        with: new-issue.md
        issue: 4
        data:
          nextIssue: '5'
      - body: 04-events-triggers.md
        title: 'Events: Using Events as Triggers'
        type: createIssue
  - title: 'Events: Using Events as Triggers'
    description: Learn how to use an event as triggers to actions
    event: issues.closed
    link: '{{ repoUrl }}/issues/5'
    actions:
      - type: respond
        with: new-issue.md
        issue: 5
        data:
          nextIssue: '6'
      - body: 05-clients-masterdata.md
        title: 'Clients: Using Master Data'
        type: createIssue
  - title: 'Clients: Using Master Data'
    description: On this step we approach the Master Data client and its usage
    event: issues.closed
    link: '{{ repoUrl }}/issues/6'
    actions:
      - type: respond
        with: new-issue.md
        issue: 6
        data:
          nextIssue: '7'
      - body: 06-graphql-implementation.md
        title: 'GraphQL: Retrieving data from Masterdata'
        type: createIssue
  - title: 'GraphQL: Retrieving data from Masterdata'
    description: Here we see how to use GraphQL to retrieve data from Mater Data
    event: issues.closed
    link: '{{ repoUrl }}/issues/7'
    actions:
      - type: respond
        with: new-issue.md
        issue: 7
        data:
          nextIssue: '8'
      - body: 07-graphiql.md
        title: 'GraphQL: Using GraphiQL'
        type: createIssue
  - title: 'GraphQL: Using GraphiQL'
    description: Here we learn how to use GraphiQL to test queries
    event: issues.closed
    link: '{{ repoUrl }}/issues/8'
    actions:
      - type: respond
        with: congrats_course.md
